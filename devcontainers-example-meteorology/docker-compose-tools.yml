include:
  - docker-compose-network.yml
  - docker-compose-volume.yml

services:
  postgres:
    image: postgres:17.2
    container_name: postgres_dev
    # set shared memory limit when using docker-compose
    shm_size: 128mb
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - type: tmpfs
        target: /dev/shm
    networks:
      - devnet
    restart: on-failure
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  postgres-db-pgadmin4:
    image: dpage/pgadmin4:9.8
    container_name: pgadmin_dev
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
      - PGADMIN_LISTEN_PORT=${PGADMIN_LISTEN_PORT}
    ports:
      - "${PGADMIN_PORT}:${PGADMIN_LISTEN_PORT}"
    volumes:
      - pgadmin4-data:/var/lib/pgadmin
      # Opcional: pré-configuração para registrar automaticamente o servidor PostgreSQL no PgAdmin
      - ./docker/pgadmin/servers.json:/pgadmin4/servers.json
    networks:
      - devnet
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:80/misc/ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s